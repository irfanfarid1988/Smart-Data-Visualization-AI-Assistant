@model SDVA.Models.ChatViewModel
@{
    ViewBag.Title = "Chat";
}

<div class="container">
    <br />
    <div class="messaging">
        <div id="loader" style="display: none; position: fixed; background-color: rgba(255,255,255,0.65); z-index: 9999;">
            <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <img src="~/Content/img/spinner.gif" alt="Loading...">
            </div>
        </div>
        <div class="inbox_msg">
            <div class="inbox_people">
                <div class="headind_srch">
                    <div class="recent_heading">
                        <h4 class="pull-left">Chat History</h4>
                    </div>
                </div>
                <div class="msg_history">
                    @if (Model.HistoryList is null)
                    {

                    }
                    else
                    {
                        foreach (var History in Model.HistoryList)
                        {
                            <a id=@String.Concat("lnkHistoryChat",History.ConversationId) class="chatHistory" href="#" data-id="@History.ConversationId">
                                <div class="chat_list">
                                    <div class="chat_people">
                                        <div class="chat_ib">
                                            <p>
                                                @History.Title
                                            </p>
                                            <h5>
                                                <span class="chat_date pull-left">
                                                    <i class="glyphicon glyphicon-time"></i>
                                                    @History.TimeStamp.ToString("M/d/yyyy hh:mm:ss tt")
                                                </span>
                                            </h5>
                                        </div>
                                    </div>
                                </div>
                            </a>
                            <button id=@String.Concat("btnDeleteChat",History.ConversationId) class="btn_delete btn pull-right" data-id="@History.ConversationId">
                                <i class="fa fa-trash "></i>
                            </button>
                        }
                    }
                </div>
            </div>
            <div class="mesgs">
                <div class="header">
                    <a id="btn-new" href="#" class="btn btn-primary">
                        New Conversation
                    </a>
                </div>
                <div class="inbox_chat">

                </div>
                <div class="type_msg">
                    <div class="input_msg_write">
                        <table style="width:100%">
                            <tr>
                                <td>
                                    <input id="btn-input" type="text" class="form-control " placeholder="Type a message" />
                                </td>
                                <td style="width:50px;">
                                    <button id="btn-send" class="btn btn-primary msg_send_btn" type="button"><i class="fa fa-paper-plane-o" aria-hidden="true"></i></button>
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>
<script src="~/Scripts/chartjs/Chart.min.js"></script>
<script src="~/Scripts/chartjs/utils.js"></script>
<script src="~/Scripts/chartjs/chartjs-plugin-labels.js"></script>
<script>
    $(function () {
        setLoaderSize();
        $(window).on('resize', function () {setLoaderSize();});
    });

    // Add some jQuery code to handle the toggle and new buttons
    $(document).ready(function () {
        $('#btn-send').click(SendUserMessage);
        $(".btn_delete").click(DeleteChat);
        $("#btn-new").click(StartNewConversation);
        $(".chatHistory").click(LoadChat);

        $("#btn-input").keypress(function (e) {
            if (e.which == 13) {
                $("#btn-send").click();
            }
        });

        // Toggle the side panel when the button is clicked
        $("#btn-toggle").click(function () {
            $(this).toggleClass("collapsed");
        });
        try {
            if (localStorage.getItem("theme") == "true")
                document.getElementById("cbTheme").checked = true
            else
                document.getElementById("cbTheme").checked = false
        } catch {
            document.getElementById("cbTheme").checked = false
        }

        try {
            if (localStorage.getItem("theme") != "true")
                $("#dark").remove();
        } catch {
            $("#dark").remove();
        }
        ;
        LoadChat();

    });

    var UserQuerymessage =
        '<div class="incoming_msg">' +
        '    <div class="received_msg">' +
        '        <div class="received_withd_msg">' +
        '           <p>[placeHolder_UserMessage]</p>' +
        '           <span class="time_date">' +
        '               <i class="glyphicon glyphicon-time"></i> ' +
        '               [placeHolder_UserMessageTime]' +
        '           </span>' +
        '        </div>' +
        '    </div>' +
        '</div>';

    var ChatbotMessage =
        '<div class="outgoing_msg">' +
        '   <div class="sent_msg">' +
        '       <p [placeHolder_ChatbotPID] [placeHolder_ChatbotStyle]>[placeHolder_ChatbotMessage]</p>' +
        '       <span class="time_date pull-right"> ' +
        '           <i class="glyphicon glyphicon-time"></i> '+
        '           [placeHolder_ChatbotMessageTime]' +
        '       </span>' +
        '   </div >' +
        '</div > ';

    function setLoaderSize() {
        $("#loader").width($(".messaging").width());
        $("#loader").height($(".messaging").height());
    }

    function SendUserMessage()
    {

        var query = $('#btn-input').val();
        $('#btn-input').val('');

        var strUserMessage = UserQuerymessage;
        strUserMessage = strUserMessage.replace("[placeHolder_UserMessage]", query);
        var messageDate = new Date();
        strUserMessage = strUserMessage.replace("[placeHolder_UserMessageTime]", messageDate.toLocaleDateString("en-US") + " " + messageDate.toLocaleTimeString("en-US"));

        $('.inbox_chat').append(strUserMessage);

        //Scroll the window to bottom
        $('.inbox_chat').animate({
            scrollTop: $('.inbox_chat').prop('scrollHeight')
        }, 0);

        $.ajax({
            url: '@Url.Action("SendMessage", "Chat")',
            type: 'GET',
            data: { UserInputQuery: query},
            success: function (response) {                // Hide the loader
                $("#loader").hide();
                ;
                var inboxChat = $('.inbox_chat');
                if (isJSON(response)) {

                    LoadChart(response, $('.inbox_chat'), new Date());
                }
                else if (response.hasOwnProperty("Error"))
                {
                    var strChatbotMessage = ChatbotMessage;
                    strChatbotMessage = strChatbotMessage.replace("[placeHolder_ChatbotPID]", "");
                    strChatbotMessage = strChatbotMessage.replace("[placeHolder_ChatbotStyle]", "");
                    strChatbotMessage = strChatbotMessage.replace("[placeHolder_ChatbotMessage]", response.Error);
                    var messageDate = new Date();
                    strChatbotMessage = strChatbotMessage.replace("[placeHolder_ChatbotMessageTime]", messageDate.toLocaleDateString("en-US") + " " + messageDate.toLocaleTimeString("en-US"));

                    $('.inbox_chat').append(strChatbotMessage);
                }
                else
                {
                    var strChatbotMessage = ChatbotMessage;
                    strChatbotMessage = strChatbotMessage.replace("[placeHolder_ChatbotPID]", "");
                    strChatbotMessage = strChatbotMessage.replace("[placeHolder_ChatbotStyle]", "");
                    strChatbotMessage = strChatbotMessage.replace("[placeHolder_ChatbotMessage]", response);
                    var messageDate = new Date();
                    strChatbotMessage = strChatbotMessage.replace("[placeHolder_ChatbotMessageTime]", messageDate.toLocaleDateString("en-US") + " " + messageDate.toLocaleTimeString("en-US"));

                    $('.inbox_chat').append(strChatbotMessage);
                }

                //Scroll the window to bottom
                inboxChat.animate({
                    scrollTop: inboxChat.prop('scrollHeight')
                }, 0);
            },
            beforeSend: function () {
                // Show the loader
                $("#loader").show();
            },
            complete: function () {
                // Hide the loader
                $("#loader").hide();
            },
            error: function (xhr, status, error) {
                // Hide the loader
                $("#loader").hide();
                console.log(error);
            }
        });
    }

    function StartNewConversation()
    {
        $.ajax({
            url: '@Url.Action("NewChat", "Chat")',
            type: 'GET',
            data: null,
            success: function (response) {
                // Hide the loader
                $("#loader").hide();

                $('.inbox_chat').html("");
                $('#btn-input').val('');
            },
            beforeSend: function () {
                // Show the loader
                $("#loader").show();
            },
            complete: function () {
                // Hide the loader
                $("#loader").hide();
            },
            error: function (xhr, status, error) {
                // Hide the loader
                $("#loader").hide();
                console.log(error);
            }
        });
    }

    function LoadChat()
    {
        ;
        var chatId="";

        if (this.dataset != undefined)
            chatId = this.dataset.id;

        $('#btn-input').val('');

        $.ajax({
            url: '@Url.Action("LoadHistory", "Chat")',
            type: 'GET',
            data: { id: chatId },
            success: function (response)
            {
                // Hide the loader
                $("#loader").hide();
                ;
                $('.inbox_chat').html("");
                $('#btn-input').val('');
                // Parse the JSON response
                var data = JSON.parse(response);

                // Get the chat window element
                var chatWindow = $("#chatWindow");

                // Loop through the messages
                for (var i = 0; i < data.length; i++)
                {
                    // Get the current message
                    var message = data[i];

                    var strChatbotMessage = "";
                    ;
                    // Set the class and id based on the message type
                    if (message.MessageType.trim() === "User")
                    {
                        var strUserMessage = UserQuerymessage;
                        strUserMessage = strUserMessage.replace("[placeHolder_UserMessage]", message.Message);
                        var messageDate = new Date(message.Timestamp);
                        strUserMessage = strUserMessage.replace("[placeHolder_UserMessageTime]", messageDate.toLocaleDateString("en-US") + " " + messageDate.toLocaleTimeString("en-US"));

                        $('.inbox_chat').append(strUserMessage);

                        //Scroll the window to bottom
                        $('.inbox_chat').animate({
                            scrollTop: $('.inbox_chat').prop('scrollHeight')
                        }, 0);
                    }
                    else if (message.MessageType.trim() === "Chatbot")
                    {
                        if (isJSON(message.Message))
                        {
                            var messageDate = new Date(message.Timestamp);
                            LoadChart(message.Message, $('.inbox_chat'), messageDate);
                        }
                        else
                        {
                            var strChatbotMessage = ChatbotMessage;
                            strChatbotMessage = strChatbotMessage.replace("[placeHolder_ChatbotPID]","");
                            strChatbotMessage = strChatbotMessage.replace("[placeHolder_ChatbotStyle]", "");
                            strChatbotMessage = strChatbotMessage.replace("[placeHolder_ChatbotMessage]", message.Message);
                            var messageDate = new Date(message.Timestamp);
                            strChatbotMessage = strChatbotMessage.replace("[placeHolder_ChatbotMessageTime]", messageDate.toLocaleDateString("en-US") + " " + messageDate.toLocaleTimeString("en-US"));

                            $('.inbox_chat').append(strChatbotMessage);

                            //Scroll the window to bottom
                            $('.inbox_chat').animate({
                                scrollTop: $('.inbox_chat').prop('scrollHeight')
                            }, 0);
                        }
                    }
                }
            },
            beforeSend: function () {
                // Show the loader
                $("#loader").show();
            },
            complete: function () {
                // Hide the loader
                $("#loader").hide();
            },
            error: function (xhr, status, error) {
                // Hide the loader
                $("#loader").hide();
                console.log(error);
            }
        });
    }

    function LoadChart(response, inboxChat, messageDate)
    {
        //Parse the string into json object
        var chartData = JSON.parse(response);

        // Create a new canvas element
        var ctx = document.createElement("canvas");

        // Set the id, width, height, and style attributes of the canvas
        var uuid = Math.random().toString(16).slice(2);
        ctx.id = "pieCanvas" + uuid;

        ctx.width = 200;
        ctx.height = 100;
        ctx.style.border = "1px solid black";

        // Create an array of labels from the comma separated string
        var labels = chartData.labels;

        // Create an array of data from the comma separated string
        var dataset = chartData.data;

        var strChatbotMessage = ChatbotMessage;
        strChatbotMessage = strChatbotMessage.replace("[placeHolder_ChatbotPID]", "id=p" + uuid);
        strChatbotMessage = strChatbotMessage.replace("[placeHolder_ChatbotStyle]", "style='background-color:white;'");
        strChatbotMessage = strChatbotMessage.replace("[placeHolder_ChatbotMessage]", "");
        strChatbotMessage = strChatbotMessage.replace("[placeHolder_ChatbotMessageTime]", messageDate.toLocaleDateString("en-US") + ' ' + messageDate.toLocaleTimeString("en-US"));

        inboxChat.append(strChatbotMessage);

        $("#p" + uuid).append(ctx);

        var showLegend = false;

        if (chartData.chartType == "pie")
            showLegend = true;

        // Create a new Chart object with type "pie"
        var myChart = new Chart(ctx, {
            type: chartData.chartType,
            data: {
                labels: labels, // Use the labels array as the labels
                datasets: [{
                    data: dataset, // Use the data array as the data
                    //Use an array of colors for background
                    backgroundColor: ["red", "orange", "yellow", "green", "blue", "indigo", "violet", "pink", "brown", "gray",
                        "black", "white", "cyan", "magenta", "lime", "AliceBlue", "AntiqueWhite", "Aqua", "Aquamarine", "Azure",
                        "Beige", "Bisque", "BlanchedAlmond", "BlueViolet", "BurlyWood", "CadetBlue", "Chartreuse", "Chocolate",
                        "Coral", "CornflowerBlue", "Cornsilk", "Crimson", "DarkBlue", "DarkCyan", "DarkGoldenRod", "DarkGray",
                        "DarkGrey", "DarkGreen", "DarkKhaki", "DarkMagenta", "DarkOliveGreen", "DarkOrange", "DarkOrchid",
                        "DarkRed", "DarkSalmon", "DarkSeaGreen", "DarkSlateBlue", "DarkSlateGray", "DarkSlateGrey",
                        "DarkTurquoise", "DarkViolet", "DeepPink", "DeepSkyBlue", "DimGray", "DimGrey", "DodgerBlue",
                        "FireBrick", "FloralWhite", "ForestGreen", "Fuchsia", "Gainsboro", "GhostWhite", "Gold",
                        "GoldenRod", "HoneyDew", "HotPink", "IndianRed", "Indigo", "Ivory", "Khaki", "Lavender",
                        "LavenderBlush", "LawnGreen", "LemonChiffon", "LightBlue", "LightCoral", "LightCyan",
                        "LightGoldenRodYellow", "LightGray", "LightGrey", "LightGreen", "LightPink", "LightSalmon",
                        "LightSeaGreen", "LightSkyBlue", "LightSlateGray", "LightSlateGrey", "LightSteelBlue",
                        "LightYellow", "LimeGreen", "Linen", "Magenta", "Maroon", "MediumAquaMarine", "MediumBlue",
                        "MediumOrchid", "MediumPurple", "MediumSeaGreen", "MediumSlateBlue", "MediumSpringGreen",
                        "MediumTurquoise", "MediumVioletRed", "MidnightBlue", "MintCream", "MistyRose", "Moccasin",
                        "NavajoWhite", "Navy", "OldLace", "Olive", "OliveDrab", "OrangeRed", "Orchid", "PaleGoldenRod",
                        "PaleGreen", "PaleTurquoise", "PaleVioletRed", "PapayaWhip", "PeachPuff", "Peru", "Pink", "Plum",
                        "PowderBlue", "Purple", "RebeccaPurple", "RosyBrown", "RoyalBlue", "SaddleBrown", "Salmon",
                        "SandyBrown", "SeaGreen", "SeaShell", "Sienna", "Silver", "SkyBlue", "SlateBlue", "SlateGray",
                        "SlateGrey", "Snow", "SpringGreen", "SteelBlue", "Tan", "Teal", "Thistle", "Tomato", "Turquoise",
                        "Violet", "Wheat", "WhiteSmoke", "YellowGreen"]
                }]
            },
            options: {
                responsive: true,
                legend: {
                    display: showLegend
                },
                plugins:{
                    labels: {
                        render: 'value',
                        // font size, default is defaultFontSize
                        fontSize: 25,

                        // font color, can be color array for each data or function for dynamic color, default is defaultFontColor
                        fontColor: 'black',
                    }
                },
                scales: chartData.chartType == "pie" ? null: {xAxes: [{ticks: {autoSkip: false}}]}
                // You can customize the options here
            }
        });
        debugger;
    }

    function DeleteChat()
    {
        debugger;
        // Show the confirmation dialog with a message
        var result = window.confirm("Are you sure you want to delete Chat History?");
        if (!result)
            return;

        var chatId = "";

        if (this.dataset != undefined)
            chatId = this.dataset.id;

        $.ajax({
            url: '@Url.Action("DeleteChat", "Chat")',
            type: 'GET',
            data: { id: chatId },
            success: function (response) {

                if (response.ChatID != "" & response.Status) {
                    $("#lnkHistoryChat" + response.ChatID).remove();
                    $("#btnDeleteChat" + response.ChatID).remove();
                    //Delete the current message if deleted chat is Active Conversation
                    if (response.IsActiveChat)
                        $('.inbox_chat').html("");
                }

                // Hide the loader
                $("#loader").hide();
            },
            beforeSend: function () {
                // Show the loader
                $("#loader").show();
            },
            complete: function () {
                // Hide the loader
                $("#loader").hide();
            },
            error: function (xhr, status, error) {
                // Hide the loader
                $("#loader").hide();
                console.log(error);
            }
        });
    }
    function postBack() {
        debugger;
        var cbTheme = document.getElementById("cbTheme");
        localStorage.setItem("theme", cbTheme.checked);

        try {
            if (localStorage.getItem("theme") != "true") {
                $("#dark").remove();
            }
            else {
                $("#light").after("<link id='dark' href='/Content/Site-Dark.css?reload=" + new Date().getTime() + "' rel='stylesheet' />");
            }

                
        } catch {
            $("#dark").remove();
        }
        reloadStylesheets();
        //document.location = "?useDarkTheme=" + cbTheme.checked;
    }
    function reloadStylesheets() {
        var queryString = '?reload=' + new Date().getTime();
        $('link[rel="stylesheet"]').each(function () {
            this.href = this.href.replace(/\?.*|$/, queryString);
        });
    }

    function isJSON(str) {
        try {
            JSON.parse(str);
        } catch (e) {
            return false;
        }
        return true;
    }
</script>
